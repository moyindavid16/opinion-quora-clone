// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Space         Space[]
  Post          Post[]
  Comment       Comment[]
  Vote          Vote[]
  Question      Question[]
}

model Space {
  id          String @id @default(cuid())
  author      User   @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String

  @@index([userId])
}

model Post {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  content   String    @db.Text
  comments  Comment[]
  votes     Vote[]

  @@index([userId])
}

model Comment {
  id      String @id @default(cuid())
  author  User   @relation(fields: [userId], references: [id])
  userId  String
  content String @db.Text
  Post    Post   @relation(fields: [postId], references: [id])
  postId  String

  @@index([userId])
  @@index([postId])
}

enum VoteType {
  Up
  Down
}

model Vote {
  id     String   @id @default(cuid())
  author User     @relation(fields: [userId], references: [id])
  userId String
  Post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@index([userId])
  @@index([postId])
}

model Question {
  id      String @id @default(cuid())
  author  User   @relation(fields: [userId], references: [id])
  userId  String
  content String

  @@index([userId])
}
